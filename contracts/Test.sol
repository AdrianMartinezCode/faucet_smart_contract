// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

contract Test {

    function test(uint testNumber) external pure returns (uint data) {

        // You can write assembly code here!
        assembly {
            mstore(0x40, 0x90)
        }

        uint8[3] memory items = [1,2,3];


        assembly {
            data := mload(add(0x90, 0x20))
        }
    }

    function test2() external pure returns (uint data) {
        
        assembly {
            let fmp := mload(0x40)
            // put hello in ascii on the fmp position
            mstore(add(fmp, 0x00), 0x68656C6C6F)
            data := mload(add(fmp, 0x00))
        }

    }
}


/*

In the remix: http://remix.ethereum.org/#optimize=false&runs=200&evmVersion=null&version=soljson-v0.8.7+commit.e28d00a7.js
And copying the contract and debugging it, we can obtain details about the machine properties and stacks, memories, etc.

Memory is a chunk of bytes,
32 bytes

0x0000000000000000000000000000000000000000000000000000000000000080

We can allocate more memory

0x0:
0x0000000000000000000000000000000000000000000000000000000000000000	????????????????????????????????
0x20:
0x0000000000000000000000000000000000000000000000000000000000000000	????????????????????????????????
0x40:
0x0000000000000000000000000000000000000000000000000000000000000080 ????????????????????????????

We can increase that:

0x60
0x80 
...



If we go to https://emn178.github.io/online-tools/keccak_256.html
And hash the signature function:
test(uint256)
We will obtain:
29e99f07 d14aa8d30a12fa0b0789b43183ba1bf6b4a72b95459a3e397cca10d7
That the first characters are the same as the Call Data section:

0x29e99f070000000000000000000000000000000000000000000000000000000000000003
The rest zeros, are the possible parameters to use on the function.



With the items line, we will have:
0x0:
0x0000000000000000000000000000000000000000000000000000000000000000	????????????????????????????????
0x20:
0x0000000000000000000000000000000000000000000000000000000000000000	????????????????????????????????
0x40:
0x00000000000000000000000000000000000000000000000000000000000000e0 ????????????????????????????????
0x60:
0x0000000000000000000000000000000000000000000000000000000000000000	????????????????????????????????
0x80:
0x0000000000000000000000000000000000000000000000000000000000000001 ????????????????????????????????
0xa0:
0x0000000000000000000000000000000000000000000000000000000000000002 ????????????????????????????????
0xc0:
0x0000000000000000000000000000000000000000000000000000000000000003 ????????????????????????????????
0xe0:
0x0000000000000000000000000000000000000000000000000000000000000001 ???????????????????????????????
*/
